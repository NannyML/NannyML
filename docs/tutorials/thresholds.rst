.. _thresholds:

====================
Thresholds
====================

NannyML calculators and estimators allow a user to configure alerting thresholds for more fine-grained control
over the alerts generated by NannyML.

This tutorial will walk you through threshold basics and how to use them to customize the behavior of NannyML.

Just the code
==============

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 1 7 8 9 10 11 12

Walkthrough
==============

We'll use an F1-score estimation as an example use case.
But first, let's dive into some of the basics. Note that we're explaining how the thresholds work in the internals of
NannyML. How you'll be using them is shown further down this page.

Threshold basics
-----------------

The :class:`~nannyml.thresholds.Threshold` class represents a way of calculating thresholds.
Its :meth:`~nannyml.thresholds.Threshold.thresholds` method returns two values: a lower and an upper threshold value.
It takes a ``np.ndarray`` of values as a parameter. This are typically the metric or method value
calculated on reference data.

All NannyML calculators and estimators have a ``threshold`` property that allows you to set a custom threshold for
their metrics or inspect them.

When the calculator or estimator runs it will use :term:`reference data<data period>` to calculate the lower and upper
threshold values during fitting.
These values are then used during calculation or estimation to check if the
values for each chunk are breaching either the lower or upper threshold value.
If so, an alert flag will be set to ``True`` for that chunk.


Some metrics have mathematical boundaries. The ``F1`` score for example, is limited to `[0, 1]`.
To enforce these boundaries some metrics and drift methods within NannyML have lower and upper limits.
When calculating the threshold values during fitting, NannyML will check if the calculated threshold values fall within
these limits. If they don't, the breaching threshold value(s) will be overridden by the theoretical limit.

NannyML also supports disabling the lower, upper or both thresholds. We'll illustrate this in the following examples.

Constant thresholds
---------------------

The :class:`~nannyml.thresholds.ConstantThreshold` class is a very basic threshold. It is given a lower and upper value
when initialized and these will be returned as the lower and upper threshold values, independent of what reference data
is passed to it.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 2
    :show_output:

The ``lower`` and ``upper`` parameters have a default value of ``None``. NannyML interprets this as `no lower threshold
should be applied`.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 3
    :show_output:

Standard deviation thresholds
--------------------------------

The :class:`~nannyml.thresholds.StandardDeviationThreshold` class will use the mean of the data it is given as
a baseline. It will then add the standard deviation of the given data, scaled by a multiplier, to that baseline to
calculate the upper threshold value. By subtracting the standard deviation, scaled by a multiplier, from the baseline
it calculates the lower threshold value.

This is easier to illustrate in code:

.. code-block:: python

    data = np.asarray(range(10))
    baseline = np.mean(data)
    offset = np.std(data)
    upper_offset = offset * 3
    lower_offset = offset * 3
    lower_threshold, upper_threshold = baseline - lower_offset, baseline + upper_offset

The :class:`~nannyml.thresholds.StandardDeviationThreshold` can be configured using the following parameters:

- ``std_lower_multiplier``: an optional float that scales the offset for the upper threshold value. Defaults to ``3``.
- ``std_upper_multiplier``: an optional float that scales the offset for the lower threshold value. Defaults to ``3``.
- ``offset_from``: a function used to aggregate the given data.

These examples show how to create a :class:`~nannyml.thresholds.StandardDeviationThreshold`.
This first example demonstrates the default usage.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 4
    :show_output:

This next example shows how to configure the :class:`~nannyml.thresholds.StandardDeviationThreshold`.
Multipliers can make the offset smaller or larger, alternatives to the `mean` may be provided as well.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 5
    :show_output:

By providing a `None` value you can disable one or more thresholds. The following example shows how to disable the
lower threshold by setting the appropriate multiplier to `None`.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 6
    :show_output:


Setting custom thresholds for calculators and estimators
---------------------------------------------------------

All calculators and estimators in NannyML support custom thresholds. You can specify a custom threshold for each
drift detection method and performance metric.

.. warning::

    The :math:`chi^2` drift detection method for categorical data does not support custom thresholds yet.
    It is currently using p-values for thresholding and replacing them by or incorporating them in the custom
    thresholding system requires further research.

    For now it will continue to function as it did before.

    When specifying a custom threshold for :math:`chi^2` in the
    :class:`~nannyml.drift.univariate.calculator.UnivariateDriftCalculator`, NannyML will log a warning message
    to clarify the custom threshold will be ignored.

We'll illustrate this by means of performance estimation using `CBPE`.
First we load our datasets.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 7

.. nbtable::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cell: 8

Next we'll set up the CBPE estimator. Note that we're not providing any threshold specifications for now.
Let's check out the defaults:

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 9
    :show_output:

After running the estimation we can see some alerts popping up. This means a couple of threshold values have been breached.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 10

.. nbtable::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cell: 11

The plots clearly illustrate this:

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 12

.. image:: ../_static/tutorials/thresholds/est_f1_default_thresholds.svg

Now let's set a threshold that inverses this result by fixing the upper threshold and dropping the lower.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 14
    :show_output:

Let's use this new custom threshold for our performance estimation now.
Note that we're passing our custom thresholds as a dictionary,
mapping the metric name to a :class:`~nannyml.thresholds.Threshold` instance.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 15

.. nbtable::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cell: 16

If we check the plots, we can see that the alerts have now inverted.

.. nbimport::
    :path: ./example_notebooks/Tutorial - Thresholds.ipynb
    :cells: 17

.. image:: ../_static/tutorials/thresholds/est_f1_inverted_thresholds.svg


Default thresholds
-------------------

Univariate Drift Calculator
****************************

.. list-table::
   :widths: 25, 75
   :header-rows: 1

   * - Drift method
     - Default threshold
   * - `kolmogorov_smirnov`
     - ``StandardDeviationThreshold()``
   * - `jensen_shannon`
     - ``ConstantThreshold(upper=0.1)``
   * - `hellinger`
     - ``ConstantThreshold(upper=0.1)``
   * - `wasserstein`
     - ``StandardDeviationThreshold()``
   * - `l_infinity`
     - ``ConstantThreshold(upper=0.1)``

Multivariate Drift Calculator
*******************************

.. list-table::
   :widths: 25, 75
   :header-rows: 1

   * - Drift method
     - Default threshold
   * - `Reconstruction error`
     - ``StandardDeviationThreshold()``

Realized Performance Calculator
********************************

.. list-table::
   :widths: 25, 75
   :header-rows: 1

   * - Drift method
     - Default threshold
   * - `roc_auc`
     - ``StandardDeviationThreshold()``
   * - `f1`
     - ``StandardDeviationThreshold()``
   * - `precision`
     - ``StandardDeviationThreshold()``
   * - `recall`
     - ``StandardDeviationThreshold()``
   * - `specificity`
     - ``StandardDeviationThreshold()``
   * - `accuracy`
     - ``StandardDeviationThreshold()``
   * - `mae`
     - ``StandardDeviationThreshold()``
   * - `mape`
     - ``StandardDeviationThreshold()``
   * - `mse`
     - ``StandardDeviationThreshold()``
   * - `msle`
     - ``StandardDeviationThreshold()``
   * - `rmse`
     - ``StandardDeviationThreshold()``
   * - `rmsle`
     - ``StandardDeviationThreshold()``

CBPE Performance Estimator
*****************************

.. list-table::
   :widths: 25, 75
   :header-rows: 1

   * - Drift method
     - Default threshold
   * - `roc_auc`
     - ``StandardDeviationThreshold()``
   * - `f1`
     - ``StandardDeviationThreshold()``
   * - `precision`
     - ``StandardDeviationThreshold()``
   * - `recall`
     - ``StandardDeviationThreshold()``
   * - `specificity`
     - ``StandardDeviationThreshold()``
   * - `accuracy`
     - ``StandardDeviationThreshold()``

DLE Performance Estimator
***************************

.. list-table::
   :widths: 25, 75
   :header-rows: 1

   * - Drift method
     - Default threshold
   * - `mae`
     - ``StandardDeviationThreshold()``
   * - `mape`
     - ``StandardDeviationThreshold()``
   * - `mse`
     - ``StandardDeviationThreshold()``
   * - `msle`
     - ``StandardDeviationThreshold()``
   * - `rmse`
     - ``StandardDeviationThreshold()``
   * - `rmsle`
     - ``StandardDeviationThreshold()``


What's next?
=============
